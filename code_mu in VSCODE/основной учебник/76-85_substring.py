#Срезы представляют собой выборку элементов, извлеченных по их индексам, например, из строки или списка. Раньше вы сталкивались с получением элементов по индексу. Срезы работают похожим образом, однако позволяют выбирать элементы еще и в определенном интервале, задавая им начальную и конечную позицию. А также с их помощью можно указать шаг выборки. Синтаксис срезов выглядит так:

#string[begin:end:step]

#срезы в диапазоне позиций
#Чтобы получить срез, нужно указать для него диапазон позиций - от начала и до конца. При этом слева от двоеточия задаем начальный индекс, а справа - конечный:
"""Txt1 = 'abcde'
Res1 = Txt1[ 1:3 ]
print( Res1 )"""
"""Txt1 = '12345'
print( Txt1[ 1:4 ] )"""
"""Lst1 = [ 1,2,3,4,5 ]
print( Lst1[ 0:3 ] )"""
"""lst1 = [ 1,2,3,4,5,6,7 ]
print( lst1[ 1:-1 ] )"""

#срез от позиции
#Если нужно создать срез от какой-либо позиции, перед двоеточием указывается только начальный индекс
"""txt1 = 'abcdef'
print( txt1[ 2: ] )"""
"""lst1 = [ 'ab', 1, 'cd', 2, 'ef', 3, 4 ]
print( lst1[ 3: ] )"""

#срез до позиции
"""txt1 = 'abcdef'
print( txt1[ :4 ] )
lst1 = [ 'a', 'b', 'c', 'd', 'e' ]
print( lst1[ :2 ] )"""

#срез с отрицательеым значением
'''
txt1 = '123456789'
print( txt1[ -6:-3 ] )
lst1 = [ 'a', 'b', 'c', 'd', 'e', 'f' ]
print( lst1[-2:-1] )
'''
#шаг выборки для среза
#Если нам нужно выбрать элементы с определенным шагом, то следует указать число в третьем параметре среза. Давайте выберем каждый второй символ, кроме первого и последнего:
"""txt1 = '123456789'
print( txt1[ 1:9:2 ] )
txt2 = '123456789'
print( txt2[ 0:9:2 ] )
txt3 = '123456789'
print( txt3[ 1:-1:2 ] )
lst1 = [ 'a', 'b', 'c', 'd', 'e' ]
print( lst1[ 0:-1:3 ] )"""

#срез только с шагом выборки
'''
txt1 = '123456789101112'
print( txt1[ ::2 ] )
print( txt1[ ::3 ] )
print( txt1[ ::1 ] )
'''
"""tpl1 = ( 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье' )
WorkDays = tpl1[ 0:-2 ]
WeekEnds = tpl1[ -2: ]
print( WorkDays, WeekEnds )"""

#Весь срез при помощи оператора [:]
'''txt1 = 'abcde'
res1 = txt1[:]
print( res1 )
txt2 = txt1[:]
txt3 = txt1
print(txt2, txt3, type(txt1), type(res1), type(txt2), type(txt3))'''

#на примере ниже видно, что при помощи [:] происходит именно копирование а не присваение, и что во втором слуае исходный список не меняется
"""lst1 = [ 1,2,3,4,5 ]
lst2 = lst1
print( lst1, lst2 )
lst2.append( 6 )
print( lst1, lst2 )
lst3 = [ 1,2,3,4,5 ]
lst4 = lst3[:]
lst4.append( 6 )
print( lst3, lst4 )"""

#переворот последовательности в обратный порядок
'''txt1 = '123456789'
res1 = txt1[::-1]
print( res1 )
res2 = res1[::-1]
print(res2)'''
"""lst1 = [ 'a', 'b', 'c' ]
res1 = lst1[::-1]
print(res1)
lst2 = [1,2,3,4,5]
res2 = lst2[::-1]
print(res2)"""
"""txt1 = '123456789'
res1 = txt1[-2::-2]
print(res1)"""

#удаление элементов с помощью срезов
"""lst1 = [1,2,3,4,5,6]
print(lst1)
del lst1[1:4]
print(lst1)"""
#чтобы удалить всё
"""lst1 = [1,2,3,4,5,6]
print(lst1)
del lst1[::1]
print(lst1)"""
#если нужно удалить символы из строки, вернется ошибка. Это происходит потому, что строки в Python являются неизменными:
"""txt1 = '123456789'
del txt1[1:3]
print(txt1)"""
"""lst1 = [1,2,3,4,5]
del lst1[0::2]
print(lst1)
lst2 = [1,2,3,4,5,6,7,8]
del lst2[0::2]
print(lst2[::-1])"""