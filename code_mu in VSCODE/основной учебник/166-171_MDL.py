    #Multi-dimensional lists | многомерные списки
    # 166 Элементы списка могут быть не только строками и числами, но и списками. В этом случае такой список списков называется многомерным. В следующем примере список lst состоит из трех элементов, в свою очередь являющихся списками:
'''
lst = [
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
]
print(lst, type(lst))
'''

#В зависимости от уровня вложенности списки могут быть двухмерными - список списков, трехмерными - список списков списков (ну и так далее - четырехмерными, пятимерными и т.п.). Приведенный выше список является двухмерным, так как внутри одного списка расположены другие подсписки, в которых нет других списков. Чтобы вывести какой-либо элемент из двухмерного списка следует писать уже не одну пару квадратных скобок, а две:
'''
lst = [
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
]
print(lst[0][0], lst[1][1], lst[2][2])
'''

#Tакже в многомерных списках могут находится другие итерируемые объекты, например, словари, множества и кортежи. Давайте изменим второй элемент списка на словарь:
'''
lst = [
    ['a', 'b', 'c'],
    {'d': 1, 'e': 2, 'f': 3},
    ['g', 'h', 'i']
]
#ниже ошибка на [1][1]
#print(lst[0][0], lst[1][1], lst[2][2])
#Чтобы получить элемент словаря, нужно сначала добраться до самого словаря с помощью первых квадратных скобок. Затем во вторых квадратных скобках прописываем ключ словаря:
print(lst[0][0], lst[1]['e'], lst[2][2])
'''

# Выведите из него числа 2, 4 и 8.
'''
lst = [
    [1, 2 ,3],
    [4, 5, 6],
    [7, 8, 9]
]
print(lst[0][1], lst[1][0], lst[2][1])
'''

# Выведите из него числа 1, 3.
'''
lst = [
    ['a', 'b'],
    {'c': 1, 'd': 2},
    {'e': 3, 'f': 4}
]
print(lst[1]['c'], lst[2]['e'])
'''

    # 167 Трехмерный список
'''
lst = [
    [
        ['a', 'b'],
        ['c', 'd'],
    ],
    [
        ['e', 'f'],
        ['g', 'h']
    ],
    [
        ['i', 'j'],
        ['k', 'i']
    ]
]
print(lst)
# Для вывода элементов из такого списка уже необходимо написать три квадратные скобки:
print(lst[0][0][0], lst[2][1][0])
'''

# Выведите из него строку 'acfg'.
'''
lst = [
    [
        ['a', 'b'],
        ['c', 'd'],
    ],
    [
        ['e', 'f'],
        ['g', 'h'],
    ]
]
print(lst[0][0][0] + lst[0][1][0] + lst[1][0][1] + lst[1][1][0])
'''

#Найдите сумму всех элементов приведенного списка.
'''
lst = [
    [
        [1, 2],
        [3, 4],
    ],
    [
        [5, 6],
        [7, 8],
    ]
]
#print(lst[0][0][0] + lst[0][0][1] + lst[0][1][0] + lst[0][1][1] + lst[1][0][0] + lst[1][0][1] + lst[1][1][0] + lst[1][1][1])
res = 0

for el_1 in lst:
    for el_2 in el_1:
        for num in el_2:
            res += num

print(res)
'''

    # 168 Перебор многомерных списков. Давайте теперь научимся перебирать многомерные списки с помощью циклов. Пусть дан следующий список:
'''
lst = [
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
]

for sub in lst:
    for el in sub:
        print(el)
'''

# С помощью цикла выведите все элементы списка в консоль.
'''
lst = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

for el in lst:
    for num in el:
        print(num)
'''

# С помощью цикла найдите сумму элементов этого списка.
'''
lst = [
    [2, 4, 6],
    [3, 5, 7],
    [9, 12, 15]
]
res = 0

for el in lst:
    for num in el:
        res += num

print(res)
'''

# С помощью цикла слейте все элементы списка в строку.
'''
lst = [
    ['a', 'b', 'c'],
    ['d', 'e', 'f'],
    ['g', 'h', 'i']
]
txt = ''

for el in lst:
    for let in el:
        txt += let

print(txt)
'''

    # 169 Перебор трехмерного списка
'''
lst = [
    [
        ['a', 'b'],
        ['c', 'd'],
    ],
    [
        ['e', 'f'],
        ['g', 'h'],
    ]
]

for el_1 in lst:
    for el_2 in el_1:
        for let in el_2:
            print(let)
'''

# С помощью цикла выведите все элементы списка в консоль.
'''
lst = [
    [
        ['q', 'w', 'e'],
        ['r', 't', 'y'],
        ['u', 'i', 'o'],
    ],
    [
        ['p', 'a', 's'],
        ['d', 'f', 'g'],
        ['h', 'j', 'k'],
    ],
    [
        ['l', 'z', 'x'],
        ['c', 'v', 'b'],
        ['n', 'm', 'q'],
    ],
]

for el_1 in lst:
    for el_2 in el_1:
        for let in el_2:
            print(let)
'''

# С помощью цикла получите сумму всех элементов списка.
'''
lst = [
    [
        [1, 3],
        [5, 7],
    ],
    [
        [2, 4],
        [6, 8],
    ]
]
res = 0

for el_1 in lst:
    for el_2 in el_1:
        for num in el_2:
            res += num

print(res)
'''

    # 170 Перебор многомерного списка словарей. Также с помощью цикла можно перебирать многомерный список словарей. Пусть у нас есть следующий список:
'''
lst = [
    {
        'a': 1,
        'b': 2,
    },
    {
        'c': 3,
        'd': 4,
    },
    {
        'e': 5,
        'f': 6,
    },
]

for el in lst:
    for key in el:
        print(key)
'''

# С помощью цикла найдите сумму всех чисел.
'''
lst = [
    {
        'a': 1,
        'b': 2,
        'c': 3
    },
    {
        'a': 4,
        'b': 5,
        'c': 6
    },
    {
        'a': 7,
        'b': 8,
        'c': 9,
    },
]
res = 0

for el in lst:
    for values in el.values():
        res += values

print(res)
'''

# Измените код предыдущей задачи так, чтобы вывести из списка пары ключ-значение словаря:
'''
lst = [
    {
        'a': 1,
        'b': 2,
        'c': 3
    },
    {
        'a': 4,
        'b': 5,
        'c': 6
    },
    {
        'a': 7,
        'b': 8,
        'c': 9,
    },
]

for el in lst:
    for key, value in el.items():
        #print(key, value)
        print(tuple(key) + tuple(str(value)))
'''

    # 171 Заполнение многомерных списков. С помощью циклов можно заполнять многомерные списки элементами. Пусть нужно получить следующий двухмерный список:
'''
[
	[1, 2, 3],
	[1, 2, 3],
]
'''
# Решим поставленную задачу, применив два вложенных цикла. Внешний цикл будет создавать подсписки, а внутренний - заполнять эти подсписки числами:
'''
lst = []

for i in range(0, 2):
    sub_list = [] # создаем подсписок
    for j in range(1, 4):
        sub_list.append(j) # заполняем подсписок числами
    lst.append(sub_list)

print(lst)
'''

'''
С помощью циклов заполните список следующими данными:
[
	[1, 2, 3],
	[1, 2, 3],
	[1, 2, 3],
]
'''
'''
lst = []

for i in range(0, 3):
    sub_list = []
    for j in range(1, 4):
        sub_list.append(j)
    lst.append(sub_list)
print(lst)
'''
'''
Даны два списка:
lst1 = []
lst2 = ['a', 'b', 'c']
С помощью циклов заполните первый список элементами второго списка так, чтобы получить следующий результат:
[
	['a', 'b', 'c'],
	['a', 'b', 'c'],
]
'''
'''
lst_1 = []
lst_2 = ['a', 'b', 'c']

for i in range(0, 2):
    lst_1.append(lst_2)

print(lst_1)
'''
















