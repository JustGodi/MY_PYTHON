    # 198 
    # Основы работы с пользовательскими функциями. В Python помимо использования стандартных функций и методов, можно создавать и применять свои собственные функции.
    # Давайте рассмотрим синтаксис для создания своей функции. Для объявления нужно написать ключевое слово def, затем ее имя и круглые скобки, в которых можно задать параметры. Далее ставится двоеточие, после которого в нижнем блоке прописывается нужный код (тело функции). Тело функции должно быть сдвинуто отступом, как и в любом другом блоке кода.
    # Для примера сделаем функцию func:
'''
def func():

        тело функции, в котором
        прописан код для
        исполнения

'''

# Сделаем так, чтобы функция func выводила восклицательный знак:
'''
def func():
    print('!')

func()
func()
func()
func()
'''

# 1 Сделайте функцию, которая будет выводить ваше имя и фамилию.
'''
def full_name(first_name=str, second_name=str) -> str:
    print('Your full name is ', first_name, second_name)

full_name('Oleg', 'Levchenko')
'''

# Сделайте функцию, которая будет выводить сумму 3 и 6.
'''
def amount(a=int, b=int) -> int:
    print(a + b)

summary(3, 6)
'''

    # 199 
    # Параметры функций. В круглых скобках функции можно передавать параметры. Давайте посмотрим на примере. Сделаем функцию, которая параметрами будет принимать два числа и выводить в консоль сумму этих чисел. этого числа. Для этого в круглых скобках через запятую напишем имена переменных, в которые будут попадать параметры. Имена этих переменных могут быть любыми. Назовем их например num1 и num2. Сразу найдем сумму переданных чисел:
'''
def amount(a=int, b=int) -> int:
    print(a+b)

amount(1, 2)
amount(10, 100)
'''

# 1 Сделайте функцию, которая параметром будет принимать число, а выводить квадрат этого числа.
'''
def square(a=int) -> int:
    print(a**2)

square(5)
square(10)
square(12345567)
'''

# 2 Сделайте функцию, которая параметрами будет принимать два числа и выводить их произведение.
'''
def mult(a=int, b=int) -> int:
    print(a*b)

mult(5, 5)
mult(9, 5)
'''

# 3 Сделайте функцию, которая параметром будет принимать число и проверять, четное оно или нет.
'''
def even_or_odd(a=int) -> str:
    while True:
        txt = '\nВведите quit чтобы закончить '
        txt += '\nВведите любое число '
        a = input(txt)

        if a.isdigit():
            a = int(a)
            if a % 2 == 0:
                print('nUMBER IS EVEN')
            else:
                print('number is odd')
        elif a == 'quit':
            break
        else:
            print('Incorrent input')

even_or_odd()
'''

# 4 Сделайте функцию, которая параметром будет принимать список с числами, а возвращать сумму квадратов элементов списка.
'''
def amount_all(lst=list) -> int:
    amount = 0
    for el in lst:
        amount += el ** 2
    return amount

lst = list(range(1, 4))

print(amount_all(lst))
print(amount_all([1, 2, 3]))
# ниже ошибка т.к. amount локальная переменная внутри функции и видна только в ней
#print(amount)
'''

    # 200 
    # Инструкция return

# Пусть у нас есть функция, которая выводит на экран квадрат переданного числа:
'''
def func(num):
    print(num ** 2)

# В случае, если выводить значение сразу на экран не нужно, его можно предварительно записать в какую-нибудь переменную:

res = func(3) # в переменной res теперь 9
'''

# Для этого в Python существует специальная инструкция return, которая позволяет указать значение, которое возвращает функция. Под словом возвращает понимают то значение, которое запишется в переменную, если ей присвоить вызванную функцию

# Давайте перепишем нашу функцию так, чтобы она не выводила результат в консоль, а возвращала его в переменную:
'''
def func(num):
    return num ** 2

# Теперь запишем результат работы функции в переменную:

res = func(3)
#После того, как данные записаны в переменную, их можно, например, вывести на экран:
print(res)
# А можно сначала изменить эти данные, а затем вывести их на экран:
res = res + 1
print(res)
# Можно сразу выполнять какие-то действия с результатом работы функции перед записью в переменную:
res = func(5) + 1
print(res)
# Можно вызвать нашу функцию несколько раз для разных чисел и сложить ее результаты:
res = func(2) + func(3)
print(res)
# Чтобы сократить написанный код, можно сразу вызвать функцию, передав ее в параметр print:
print(func(3))
'''

# 1 Сделайте функцию, которая параметром принимает число, а возвращает куб этого числа. С помощью этой функции найдите куб числа 3 и запишите его в переменную res.
'''
def cube_of_num(a=int) -> int:
    return a ** 3

res = cube_of_num(15)

print(res)


# 2 С помощью созданной вами функции найдите сумму кубов числа 2 и числа 3 и запишите ее в переменную res.

res = cube_of_num(2) + cube_of_num(3)

print(res)
'''

    # 201
    # Параметры функций можно делать не обязательными. Для этого параметрам нужно задать значения по умолчанию. Давайте посмотрим, как это делается. Пусть у нас есть следующая функция:
'''
def func(num_1=int, num_2=int) -> int:
    return num_1 + num_2

print(func(1, 2))
'''

# Давайте сделаем так, чтобы второй параметр по умолчанию имел значение 2:
'''
def func(num_1=int, num_2=2) -> int:
    return num_1 + num_2

print(func(1))

# Несмотря на то, что второе число является необязательным параметром, ему все равно можно задать значение и при вызове функции:

print(func(2, 4))
'''

    # 202 Именованные параметры

    # 203 Параметры-переменные функций
'''
def func(a=int) -> int:
    return a ** 2

num_1 = 3

print(func(3))
print(func(num_1))
'''

    # 204 Для сокращения кода можно при вызове вкладывать функции друг в друга. Пусть у нас есть функции для возведения числа в квадрат, в куб и для суммирования двух чисел:
'''
def square(a=int) -> int:
    return a ** 2

def cube(a=int) -> int:
    return a ** 3

def amount(num_1=int, num_2=int) -> int:
    return num_1 + num_2

#Чтобы получить сумму квадрата и куба числа, мы можем вложить их в параметр функции add при ее вызове:

res = amount(square(2), cube(4))
print(res)

# Кроме того, можно вызывать функции и в теле другой функции. Давайте перепишем предыдущий пример и вызовем функции внутри add:

def amount_2(num_1=int, num_2=int) -> int:
    return square(num_1) + cube(num_2)

res = amount_2(2, 4)
print(res)
'''

# 1 Сделайте функцию, которая будет возводить число в квадрат и функцию для получения куба числа. Также с их помощью создайте функцию, чтобы вывести на экран куб квадрата числа.
'''
def square(a=int) -> int:
    return a ** 2

def cube_of_square(a=int) -> int:
    return a ** 3

def out(txt):
    print(txt)

out(cube_of_square(square(2)))
'''

# 2 Сделайте функцию, которая будет проверять тип переменной и если переменная является строкой, то выведет ее с заглавной буквы. Также создайте функцию, которая будет приветствовать пользователя по имени. Вложите в нее первую функцию так, чтобы имя всегда выводилось с заглавной буквы.
'''
def is_str(txt=str) -> str:
    while True:
        txt = input('Введите ваше Имя: ')
        if txt.isnumeric():
            print('Incorrect enter, try again or enter "quit"')
            txt = int(txt)
        elif txt == 'quit':
            break
        else:
            return txt.title()

def hello_user(txt_2=str) -> str:
    return print('Hello, dear ', is_str())

hello_user()
'''

    # 205 Ключевое слово pass в функции. Бывают случаи, когда нужно прописать шаблон функции, но при этом кода для нее еще нет. Если оставить тело функции пустым, то Python сразу же вернет ошибку:

#def func(test): 
# выведет ошибку

# В этом случае следует применять ключевое слово pass. Оно заполняет пустое место в теле функции, при этом ошибка не будет возвращаться:
'''
def func(test):
    pass

func(1)
func('')

#выдадут ошибку 
#func()
#func(test)
#func(,)
'''

# 1 Дан следующий код: num1 = 2 num2 = 3 def func(num1, num2): res = func(num1, num2) print(res)
# Перепишите его, чтобы избежать вывода ошибки.
'''
num_1 = 2
num_2 = 3

def func(num_1, num_2):
    pass

res = func(num_1, num_2)

print(res)
'''

# 2 Дан следующий код:  
#tst1 = 'abc' 
#tst2 = 'def' 
#def func1(txt):
#   return txt.upper() 
#def func2(txt1, txt2):
# res = func2(func1(tst1), tst2) print(res)
# Перепишите его, чтобы избежать вывода ошибки.
'''
tst1 = 'abc'
tst2 = 'def'

def func_1(txt):
    return txt.upper()

def func_2(txt_1, txt_2):
    pass

res = func_2(func_1(tst1), tst2)

print(res)
'''

    # 206 Комментарии к функциям. Если нужно сделать комментарий с описанием того, что делает функция, то следует его записать в верхней строчке тела функции:
'''
def func(num1, num2):
    """функция складывает два числа"""
    return num1 + num2
'''
# 1 Напишите комментарий к функции:
#def func(num1, num2):
    #return num1 * num2
'''
def mult(num_1=int, num_2=int) -> int:
    #функция умножает две переменные друг с другом
    return num_1 * num_2

print(mult(2, 2))
'''

    # 207 Советы по созданию функций

    #Имена функций должны быть глаголами.

    #Имя каждой функции должно точно отражать то, что функция делает.

    #Функция должна делать только то, что явно подразумевается её названием, и не делать другого.

    #Каждая функция должна выполнять только одно действие.

    #Используйте внутри функций вспомогательные функции.

    #Код функций лучше не делать длиннее 10-15 строк.

    #Длинные функции лучше разбивать на ряд вспомогательных.

    #Используйте общепринятые префиксы в именах функций: show, get, set, calc, create, change, check.

    #Если имя функции состоит из двух и более слов, то следует их отделять друг от друга нижним подчеркиванием _, например, get_sum.

    #Выносите дублирующийся код в функции.

# 1 Напишите, какие недостатки у следующего кода, и исправьте их:
#def func(num1, num2):
#    return num1 * num2
# Название функции не отражает того, что функция делает, у переменных не задан их тип, не задан тип даннх возвращаемый функцией
'''
def multipl(num_1=int, num_2=int) -> int:
    #умножает две переменные между собой
    return num_1 * num_2

print(multipl(2, 2))
'''









































































