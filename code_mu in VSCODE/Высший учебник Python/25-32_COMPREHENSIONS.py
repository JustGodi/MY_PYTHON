            # 25 Списковые включения в Python

        # Списковые включения позволяют генерировать списки, применяя заданное выражение к каждому элементу будущего списка. Также с помощью включений можно фильтровать элементы согласно заданным условиям.

        # Во включении прописывается выражение, которое будет применяться к элементам исходного списка. В конструкции for...in задается имя элемента и исходный список (итерируемый объект), из которого будет создан новый:

'''
lst = [exression for element in iter]
'''

    # Давайте объявим переменную lst. Для нее пропишем, что элемент списка i должен генерироваться в диапазоне 1 до 10. Затем выведем полученный список в консоль:

'''
lst = [i for i in range(1, 10)]
print(lst)
'''

# 1 С помощью включения сделайте следующий список: [1, 2, 3, 4, 5]

'''
lst = [i for i in range(1, 6)]
print(lst)
'''

# 2 С помощью включения сделайте следующий список: [5, 4, 3, 2, 1]

'''
lst = [i for i in range(5, 0, -1)]
print(lst)
'''

            # 26 Операции с элементами в списковом включении в Python

        # Во включении слева от конструкции for...in можно указать не только переменную, но задать для нее определенную операцию.

        # Давайте сделаем список, в котором от каждого сгенерированного элемента будет вычитаться единица:

'''
lst = [i -1 for i in range(1, 6)]
print(lst)
'''

# 1 

# Каким будет результат выполнения следующего кода: lst = [i + 2 for i in range(0, 6)] print(lst)

'''
lst = [i + 2 for i in range(1, 6)]
print(lst)
'''

# 2

# Каким будет результат выполнения следующего кода: lst = [i / 2 for i in range(4, 10)] print(lst)

'''
lst = [i / 2 for i in range(4, 10)]
print(lst)
'''

# 3

# Каким будет результат выполнения следующего кода: lst = [i + 10 for i in range(0, 8, 2)] print(lst)

'''
lst = [i + 10 for i in range(0, 8, 2)]
print(lst)
'''

            # 27 Генерация из списка в Python

        # Вместо диапазона чисел для генерации списка можно использовать и другой список.
        
        # Давайте создадим список, элементами которого будут числа второго списка, возведенные в квадрат:

'''
lst = [i ** 2 for i in [1, 2, 3]]
print(lst)
'''

# 1

#Дан список: С помощью включения запишите в новый список квадраты элементов первого списка. lst = [1, 2, 3, 4, 5]

'''
lst_1 = [1, 2, 3, 4, 5]

lst_of_squares = [i ** 2 for i in lst_1]

print(lst_of_squares)
'''

# 2

# Дан список: lst = [1, 3, 5, 7, 9] С помощью включения запишите в новый список элементы первого списка, умноженные на число 3.

'''
lst = [1, 3, 5, 7, 9]
lst_of_mult = [i * 3 for i in lst]
print(lst_of_mult)
'''

            # 28 Условия в списковом включении в Python

        # Если нужно задать условие во включении, то оно прописывается справа от итерируемого объекта (списка, диапазона чисел):


# list = [expression for element in iter if condition]


        # При генерации списка можно задавать дополнительные условия для его элементов. Давайте напишем условие, согласно которому в список попадут только четные элементы из диапазона от 1 до 10:

'''
lst = [i for i in range(1, 10) if i % 2 == 0]
print(lst)
'''

    # 1 

# С помощью включения сделайте список только с нечетными элементами: [1, 3, 5, 7, 9]

'''
lst = [i for i in range(1, 12) if i % 2 != 0]
print(lst)
'''

    # 2

# Дан список: lst = [-6, -3, -1, 0, 2, 4] С помощью включения сделайте из него новый список, в котором будут находится только положительные числа, включая ноль.

'''
lst = [-6, -3, -1, 0, 2, 4]
lst_posi = [i for i in lst if i >= 0]
print(lst_posi)
'''

            # 29 Несколько циклов в списковом включении в Python

        # Работа с включением позволяет прописать несколько циклов для генерации нового списка. Первый заданный цикл будет внешним, в нем будет запускаться второй прописанный цикл. Это значит, что второй цикл будет вложен в первый.

'''
lst = [(i, j) for i in range(1, 4) for j in range(1, 3)]
print(lst)
'''

    # 1

# Даны два списка:
'''
lst1 = ['1', '2']
lst2 = ['a', 'b', 'c']
С помощью включения сделайте из них новый список:

[('1', 'a'), ('1', 'b'), ('1', 'c'), ('2', 'a'), ('2', 'b'), 
	('2', 'c')] 
'''

'''
lst1 = ['1', '2']
lst2 = ['a', 'b', 'c']
lst_3 = [(i, j) for i in lst1 for j in lst2]
print(lst_3)
'''

            # 30 Несколько циклов с условием в списковом включении в Python

        # К нескольким циклам, прописанным во включении, можно добавить условие. Давайте зададим условие, чтобы j было меньше i:

'''
lst = [(i, j) for i in range(1, 4) for j in range(1, 3) if j < i]
print(lst)
'''

    # 1

# Каким будет результат выполнения следующего кода: lst = [(i, j) for i in range(0, 5) for j in range(0, 5) 	if j == i]  print(lst)

'''
lst = [(i, j) for i in range(0, 5) for j in range(0, 5) if j == i]
print(lst)
'''

    # 2

# Каким будет результат выполнения следующего кода: lst = [(i, j) for i in range(1, 4) for j in range(1, 4)  	if i % 2 == 0]  print(lst)

'''
lst = [(i, j) for i in range (1, 4) for j in range(1, 4) if i % 2 == 0]
print(lst)
'''

            # 31 Генерация двумерного списка в Python

        # С помощью двух циклов, заданных во включении можно создать двумерный список.

        # Давайте сделаем список, состоящий из трех списков, в которых в свою очередь находятся числа от 1 до 4. Для этого во включении нужно сделать еще одно внутреннее включение. В нем пропишем генерацию чисел с помощью цикла и переменной j. При этом внешний цикл с i зададим справа от внутреннего включения:

'''
lst_1 = [[j for j in range(0, 5)] for i in range (0, 3)]
print(lst_1)
'''

    # 1

    # С помощью включения сделайте следующий список:

#[
#    [1, 2, 3, 4, 5],
#    [1, 2, 3, 4, 5],
#    [1, 2, 3, 4, 5],
#]

'''
lst = [[i for i in range(0, 6)] for i in range (0, 3)]
print(lst)
'''

    # 2

    # С помощью включения сделайте следующий список:

#[
	#[
		#[1, 2, 3],
		#[1, 2, 3],
		#[1, 2, 3],
	#],
	#[
		#[1, 2, 3],
		#[1, 2, 3],
		#[1, 2, 3],
	#],
	#[
		#[1, 2, 3],
		#[1, 2, 3],
		#[1, 2, 3],
	#],
#]

'''
lst = [[[i for i in range(1, 4)] for j in range(0, 3)] for y in range(0, 3)]
print(lst)
'''

            # 32

        # Чтобы создать словарь, можно также воспользоваться включением. При этом его синтаксис будет выглядеть вот так:

        # dictionary = { key: value for element in iter }

        # Давайте сделаем словарь, в котором ключ будет генерироваться в диапазоне 1 до 4. А значением будет являться квадрат ключа:

'''
dct = {i: i**2 for i in range(1, 5)}
print(dct)
'''


    # 1

    # Дан список: lst = ['a', 'b', 'c', 'd', 'e'] С помощью этого списка создайте словарь, в котором ключами будут элементы нашего списка, а значениями - их порядковые номера:

'''
lst = ['a', 'b', 'c', 'd', 'e']
dct = {j: lst.index(j) for j in lst}
print(type(dct), dct)
'''

'''
#попытка усложнить жизнь, выше всё верно
lst = ['a', 'b', 'c', 'd', 'e']
dct = {j for j in lst: lst.index(j) for j in lst}
print(type(dct), dct)
'''

    # 2

    # Даны два списка:

#lst1 = ['name1', 'name2', 'name3', 'name4']
#lst2 = ['john', 'kate', 'alex', 'mary']
#С помощью них создайте словарь, в котором ключами будут элементы первого списка, а значениями - второго списка:

#{'name1': 'john', 'name2': 'kate', 'name3': 'alex', 'name4': 'mary'}

# тут я забыл про zip, и нагуглил это решение, очень жаль :(:(:(
'''
lst1 = ['name1', 'name2', 'name3', 'name4']
lst2 = ['john', 'kate', 'alex', 'mary']
dct = {k: v for k, v in zip(lst1, lst2)}
print(dct)
'''




























































































