import math
import random
            # 74

            # Введение в исключительные ситуации в Python

            # В этом разделе будут рассматриваться исключительные ситуации в Python. Для начала нужно разобраться, что они из себя представляют.

            # При написании какой-либо программы, разработчик неявно рассчитывает на то, что все используемые программно-технические механизмы будут работать корректно.

            # Это, однако, не всегда так. При передаче данных по сети происходит обрыв связи и данные приходят к нам в некорректном виде, или вообще не приходят. При записи файла оказывается, что выделенное нам место на жестком диске закончилось, и файл не может записаться. При чтении файла оказывается, что такого файла не существует и нам не откуда читать. При печати данных на принтере происходит обрыв кабеля, соединяющего принтер и компьютер.

            # Все описанные ситуации имеют общую суть: происходит некий сбой, который приводит к невозможности или бессмысленности завершения запланированной операции.

            # Бывают также ситуации, в которой происходит некая ошибка, не являющаяся сбоем. Например, вы спрашиваете у пользователя его email, и он вводит email в некорректном формате. Понятно, что наша программа не может продолжить обрабатывать email, так как он не корректен. Но, тем не менее это - не исключительная ситуация. Наша программа может сама исправить ситуацию: она выведет сообщение об ошибке и пользователь повторит свой ввод.

            # На самом деле разница между сбоем и не сбоем весьма расплывчата. Событие, которое одна программа может трактовать как исключительную ситуацию, другая программа может трактовать как некую ошибку, с которой она может справится.

            # Критерий тут следующий: если при возникновении проблемы ваша программа может продолжать выполнять то, для чего она предназначена, то это не исключительная ситуация, а если не может - то да, это исключение.

            # Например, у нас есть программа, которая должна спросить email пользователя. Если пользователь ввел email в некорректном формате - это не сбой. Это ожидаемая проблема и наша программа будет спрашивать у пользователя email столько раз, пока он не введет его корректно.

            # Пусть наша программа, которая спрашивает email, должна также отправить этот корректный email через интернет. При этом оказывается, что интернет не работает. Вот это уже проблема: программа никак не сможет отправить данные через интернет, если интернет не работает. Программа, тем не менее, может продолжить свое выполнение: она может вывести информацию о проблеме, повторить попытку отправки через некоторое время, и так далее. Но эти действия уже не совсем то, для чего программа была предназначена, так как основное действие - отправка email программа сделать не сможет.

            # Исходя из чего, очень часто трактовка какое поведение будет считаться нормальным, а какое исключительным зависит от задач, стоящих перед программистом.

            # 75

            # Перехват исключений в Python

        # В Python по сравнению с другими языками программирования очень много ситуаций, вызывающих исключения.

        # Давайте рассмотрим их подробнее. Пусть у нас есть список:

# lst = [1, 2, 3]

        # Обратимся к несуществующему элементу списка:

# print(lst[4])

        # Если же нам нужно продолжить работу без вывода исключения, его следует поймать с помощью конструкции try-except. Она имеет следующий синтаксис:

'''
try:
    # код, вызывающий исключение
except:
    # обработка ошибки
'''

        # В блоке try следует размещать код, который может содержать исключение. Если вдруг при выполнении этого кода возникнет исключительная ситуация, то выполнение кода не остановится, а перейдет в код блока except. В данном блоке следует прописать вывод сообщения, максимально точно описывающего суть возникшей ошибки.

        # Если же при выполнении блока try никаких исключительных ситуаций не случилось, то полезный код просто выполнится, а код из блока except - нет.

        # Давайте отловим наше исключение при обращении к несуществующему элементу списка. Для этого в блок try разместим код с потенциальной ошибкой. А в блоке except укажем вывод в консоль сообщения 'error: elem is not exist':

'''
lst = [1, 2, 3]
try:
    print(lst[4])
except:
    print('error: elem is not exist')
# После выполнения кода выведется:
# 'error: elem is not exist'
'''

        # После изучения конструкции try-except стиль написанного вами кода должен измениться. Теперь все места, в которых может возникнуть исключительная ситуация, нужно оборачивать в try, а в блоке except прописывать реакцию на это исключение.

    # 1

# Спросите у пользователя два числа. Поделите одно на другое. Поймайте исключительную ситуацию деления на ноль.

'''
def div():
    num_1 = input('Введите первое число: ')
    num_2 = input('Введите второе число: ')
    if num_1.isdigit() & num_2.isdigit():
        division = int(num_1) / int(num_2)
        return division
    else:
        print('Введеы не числа')

#print(div())


try:
    print(div())
except ZeroDivisionError:
    print('Введено не корректно второе число, на 0 делить нельзя')
'''
#print(1/0)

    # 2

# Спросите у пользователя число. Найдите квадратный корень из этого числа. Поймайте исключительную ситуацию извлечения корня из отрицательного числа.

'''
def square_of_the_number():
    num = input('Введите любое число')
    square = math.sqrt(int(num))
    return square


try:
    print(square_of_the_number())
except ValueError:
    print('Введено отрицательно число или буква, попробуйте снова')
'''
#print(int('a')/2)
#print(math.sqrt(-4))

    # 3

# Дан список. Спросите у пользователя целое число. Получите элемент списка, номер которого ввел пользователь. Поймайте исключительную ситуацию, которая случится, если пользователь ввел число вне диапазона списка.

'''
lst = list(range(random.randint(1, 5), random.randint(6, 10)))

def number_of_list_element(lst: list):
    a = input('введите номер элемента который хотите вывести: ')
    return print(lst[int(a)])

#print(lst)
#number_of_list_element(lst)
#print(lst[a])

try:
    number_of_list_element(lst)
except IndexError:
    print('Элемента с заданым индексом не существует')
except ValueError:
    print('Введено некорректное значение')
except NameError:
    print('Введено некорректное значение')
'''

    # 4

# Дан следующий код: num = '5' res = num + 2 print(res) Что не так с этим кодом? Исправьте его недостатки.

'''
num = '5'
try:
    res = num + 2
except TypeError:
    print('Нельзя складывать строки с числами')
'''

    # 5

'''
lst = [1, 2, 3, 4]

def getElem(iter):
    print(iter[4])

try:
    getElem(lst)
except IndexError:
    print('Элемента с данным индексом не существует')
'''





            # 76

            # Основные типы исключений в Python

        # Давайте разберем несколько основных типов исключений, возникающих в Python.

        # Исключение типа TypeError представляет собой ошибку, возникающую при недопустимом типе для переменной или параметра. Например, такое исключение появится, если сложить строку и число.

        # Исключение типа SyntaxError представляет собой ошибку, возникающую при неправильной записи кода. В это исключение входят также IndentationError (неправильные отступы) и TabError (смешивание в отступах табуляции и пробелов).

        # Исключение типа ArithmeticError появляется при арифметической ошибке в коде. В это исключение также входит ZeroDivisionError, возникающее при делении на ноль.

        # Существуют и другие типы исключений. С их полным описанием можно ознакомиться здесь: https://docs.python.org/3/library/exceptions.html





            # 77

            # Перехват разных типов исключений в Python

        # В одном и том же коде может понадобиться перехватить различные типы исключений.

        # Пусть нам нужно поймать исключение при делении на ноль. При такого рода ошибке выходит исключение:

# ZeroDivisionError: division by zero

        # Чтобы его поймать, имя исключения следует записать в блоке except:

'''
try:
    print(1 / 0)
except ZeroDivisionError:
    print('error: do not divibe by zero')
'''

        # Также пусть у нас есть список:


# lst = [1, 2, 3]

        # Если задать в блоке try код с другой потенциальной ошибкой, например, с выводом несуществующего элемента, то исключение, не пойманное в блоке except, пройдет дальше и выведется в консоль. Из-за чего остановится работа кода:

'''
try:
    print(lst[4])
except ZeroDivisionError:
    orint('error: do not divibe by zero')
'''

        # Для решения такой ситуации, нужно указать в каждом блоке имя соответствующего типа исключений. Давайте добавим в наш код исключение по недостающему элементу:

'''
lst = [1, 2, 3]

try:
    print(lst[4])
except IndexError:
    print('error: elem is not exist')
'''

    # 1

# Дан следующий код: 
# txt = '2' 
# res1 = txt + 3 
# res2 = txt1 Напишите код, чтобы перехватить представленные в переменных res1 и res2 исключения.

'''
txt = '2'

try:
    res_1 = txt + 3
except TypeError:
    print('Нельзя складывать строки и числа')

res_2 = txt
'''





            # 78

            # Блок else при перехвате исключений в Python

        # В конструкцию try-except также можно добавлять блок else. Важный нюанс состоит в том, что код, размещенный в блоке else сработает если до него в try-except не было поймано ни одного исключения.

        # Пусть у нас есть список:

'''
lst = [1, 2, 3]

        # В конструкции try-except пропишем перехват исключения для несуществующего элемента списка:

try:
    print(lst[4])
except IndexError:
    print('error: elem is not exist')
'''

        # Теперь давайте укажем в блоке else вывод суммы всех элементов списка:

'''
lst = [1, 2, 3]

try:
    print(lst[4])
except IndexError:
    print('error: elem is not exist')
else:
    print(sum(lst))
'''

        # Если код в блоке try обращается к отсутствующему элементу, то в консоли появится сообщение об ошибке:

# 'error: elem is not exist'

        # Теперь зададим в блоке try вывод элемента, который точно находится в списке:

'''
lst = [1, 2, 3]
try:
    print(lst[0])
except IndexError:
    print('error: elem is not exist')
else:
    print(sum(lst))
'''

        # После выполнения кода в консоли появятся два числа: элемент, заданный в try и сумма всех элементов списка: 1 & 6

    # 1

# Дан список: lst = [1, 2, 3] Напишите код, чтобы перехватить исключение, связанное с делением на ноль. В случае, если данное исключение не появится, пусть выведется длина списка.

'''
lst = [1, 2, 3]

try:
    print(sum(lst) / 1)
except ZeroDivisionError:
    print('На нуль нельзя делить')
else:
    print(len(lst))
'''





            # 79

            # Блок finally при перехвате исключений в Python

        # В ситуациях, когда нужно вывести какое-либо сообщение независимо от наличия исключений, нужно использовать блок finally в конструкции try-except.

        # Пусть у нас есть список и конструкция try-except для перехвата несуществующего элемента списка:

'''
lst = [1, 2, 3]

try:
    print(lst[4])
except IndexError:
    print('error: elem is not exist')
'''

        # Давайте обратимся к несуществующему элементу списка, но при этом в блоке finally пропишем вывод суммы элементов:

'''
lst = [1, 2, 3]

try:
    print(lst[4])
except:
    print('errot: elem is not exist')
finally:
    print(sum(lst))
'''

    # 1

# txt = 'abc' Напишите код, чтобы перехватить исключение, связанное с прибавлением числа 2 к строке. Также пропишите вывод строки в консоль с заглавной буквы.

'''
txt = 'abc'

try:
    print(txt + 2)
except TypeError:
    print('Нельзя складывать числа и строки')
finally:
    print(txt.title())
'''





            # 80

            # Выбрасывание своих типов исключений в Python

        # Исключения, находящиеся в Python по умолчанию, не всегда могут удовлетворить все наши потребности в различных ситуациях. Поэтому в Python встроена возможность создавать исключения своего типа.

        # Чтобы создать исключение, нужно объявить специальный класс ООП с помощью ключевого слова class. Справа от него прописывается имя исключения, а после имени в круглых скобках - тип исключения:

'''
class Исключение(тип исключения):
    pass
'''

        # Давайте создадим свой класс ToBigLength для перехвата слишком длинных списков. В круглых скобках данного класса пропишем тип исключения, которое он будет ловить. Пусть это будет исключение Exception. В теле класса пока можно прописать pass:

'''
class ToBigLenght(Exception):
    pass

        # Давайте проверим работу только что созданного исключения. Для этого пропишем конструкцию try-except, а наше исключение выбросим с помощью специальной команды raise:

try:
    raise ToBigLenght
except ToBigLenght:
    print('error: list is too big')
'''

    # 1

# Создайте исключение для перехвата отрицательного числа.

'''
class NegativeNumber(Exception):
    pass

try:
    raise NegativeNumber
except NegativeNumber:
    print('Нельзя использовать отрицательные числа')
'''

    # 2

# Создайте исключение для перехвата нуля.
'''
class ZeroNumber(Exception):
    pass

try:
    raise ZeroNumber
except ZeroNumber:
    print('Нельзя проводить операции с нулём')
'''






            # 81

            # Пользовательские исключения в условиях в Python

        # Для выбрасывания исключения обычно задаются специальные условия

        # Пусть у нас есть список:

'''
lst = [1, 2, 3]

        # Давайте зададим условие, если длина списка меньше или равна трем, то пусть подсчитывается сумма элементов. В противном случае в блоке else пусть выбросится наше исключение ToBigLength:

class ToBigLenght(Exception):
    pass

try:
    if len(lst) <= 3:
        print(sum(lst))
    else:
        raise ToBigLenght
except ToBigLenght:
    print('ToBigLenghtError: list is too big')

lst_2 = [1, 2, 3, 4]

try:
    if len(lst_2) <= 3:
        print(sum(lst_2))
    else:
        raise ToBigLenght
except ToBigLenght:
    print('error: list is too big')
'''

    # 1

# Напишите условие, если число положительное, то пусть оно возводится в квадрат. Если число отрицательное - пусть выбрасывается исключение, созданное вами для предыдущего урока.

'''
class NegativeNumber(Exception):
    pass

class ZeroNumber(Exception):
    pass


#print(f'Square of num {num} is:' + ' ' num**2)

try:
    num = int(input('Введите положительное число '))
    if num > 0:
        print(f'Square of num {num} is: {num**2}')
    elif num == 0:
        raise ZeroNumber
    else:
        raise NegativeNumber
except NegativeNumber:
    print('NegativeNumberError: num is negative')
except ZeroNumber:
    print('ZeroNumberError: zero is zero')
except ValueError:
    print('ValueError: incorrect value type: letter')
'''

    # 2

# Напишите условие, если число не равно нулю, то к нему прибавляется 5. В противном случае пусть выбрасывается исключение, созданное вами для предыдущего урока

'''
class ZeroNumber(Exception):
    pass


try:
    num = int(input('Введите положительное число '))
    if num != 0:
        num = num + 5
        print(num)
    else:
        raise ZeroNumber
except:
    print('ZeroNumberError: zero is zero')
'''

            # 82

            # Функция с исключением в Python

        # Исключения очень удобно выбрасывать, прописывая их в функции с помощью условий.

        # Давайте сделаем функцию get_sum, которая будет выводить сумму элементов списка только, если длина списка меньше или равна 3. В противном случае, пусть выбрасывается наше исключение ToBigLength:

'''
class ToBigLenght(Exception):
    pass

def get_sum(lst: list):
    if len(lst) <= 3:
        return sum(lst)
    else:
        raise ToBigLenght

        # Теперь передадим в функцию get_sum список и выведем функцию в консоль:

lst = [1, 2, 3, 4]
print(get_sum(lst)) # console: ToBigLenght
'''
        # Также в функциях можно задавать перехват нескольких типов исключений. Давайте создадим еще один класс исключений ToSmallLength:
'''
class ToBigLenght(Exception):
    pass
class ToSmallLenght(Exception):
    pass

        # Теперь пропишем в функции условие, если длина списка равна нулю, то пусть выбросится ToSmallLength. Если же не перехватится ни одно исключение, то пусть выведется сумма всех элементов списка:

def get_sum(lst: list):
    if len(lst) > 3:
        raise ToBigLenght
    if len(lst) == 0:
        raise ToSmallLenght
    else:
        return(sum(lst))

        # Для удобства можно заключить список, который будет передаваться в параметр функции, саму функцию и ее вызов в блок try. А перехват наших двух исключений разместим в блоках except:

lst_1 = [1, 2, 3]
lst_2 = list(range(4))
lst_3 = []
try:
    print(get_sum(lst_3))
except ToBigLenght:
    print('ToBigLEnghtError: list is too big')
except ToSmallLenght:
    print('ToSmallLenghtError: list is empty')
'''

    # 1

# Создайте функцию, которая параметром будет принимать число. В ней пропишите условия, если число отрицательное и равно нулю, то пусть выбросятся соответствующие исключения. в противном случае пусть число будет умножено на 3.

'''
class LessOrEqualZero(Exception):
    pass


def num_more_than_zero():
    num = int(input('Введите число больше нуля '))
    if num <= 0:
        raise LessOrEqualZero
    else:
        num = num * 3
        return num

try:
    print(num_more_than_zero())
except LessOrEqualZero:
    print('LessOrEqualZeroError: Num is less or equal zero')
except ValueError:
    print('Incorrect input: let is not num')
'''

    # 2

# Проверьте работу созданную вами функции с помощью конструкции try-except. При этом также перехватите ваши исключения.

# уже


























