import math
import random
            # 74

            # Введение в исключительные ситуации в Python

            # В этом разделе будут рассматриваться исключительные ситуации в Python. Для начала нужно разобраться, что они из себя представляют.

            # При написании какой-либо программы, разработчик неявно рассчитывает на то, что все используемые программно-технические механизмы будут работать корректно.

            # Это, однако, не всегда так. При передаче данных по сети происходит обрыв связи и данные приходят к нам в некорректном виде, или вообще не приходят. При записи файла оказывается, что выделенное нам место на жестком диске закончилось, и файл не может записаться. При чтении файла оказывается, что такого файла не существует и нам не откуда читать. При печати данных на принтере происходит обрыв кабеля, соединяющего принтер и компьютер.

            # Все описанные ситуации имеют общую суть: происходит некий сбой, который приводит к невозможности или бессмысленности завершения запланированной операции.

            # Бывают также ситуации, в которой происходит некая ошибка, не являющаяся сбоем. Например, вы спрашиваете у пользователя его email, и он вводит email в некорректном формате. Понятно, что наша программа не может продолжить обрабатывать email, так как он не корректен. Но, тем не менее это - не исключительная ситуация. Наша программа может сама исправить ситуацию: она выведет сообщение об ошибке и пользователь повторит свой ввод.

            # На самом деле разница между сбоем и не сбоем весьма расплывчата. Событие, которое одна программа может трактовать как исключительную ситуацию, другая программа может трактовать как некую ошибку, с которой она может справится.

            # Критерий тут следующий: если при возникновении проблемы ваша программа может продолжать выполнять то, для чего она предназначена, то это не исключительная ситуация, а если не может - то да, это исключение.

            # Например, у нас есть программа, которая должна спросить email пользователя. Если пользователь ввел email в некорректном формате - это не сбой. Это ожидаемая проблема и наша программа будет спрашивать у пользователя email столько раз, пока он не введет его корректно.

            # Пусть наша программа, которая спрашивает email, должна также отправить этот корректный email через интернет. При этом оказывается, что интернет не работает. Вот это уже проблема: программа никак не сможет отправить данные через интернет, если интернет не работает. Программа, тем не менее, может продолжить свое выполнение: она может вывести информацию о проблеме, повторить попытку отправки через некоторое время, и так далее. Но эти действия уже не совсем то, для чего программа была предназначена, так как основное действие - отправка email программа сделать не сможет.

            # Исходя из чего, очень часто трактовка какое поведение будет считаться нормальным, а какое исключительным зависит от задач, стоящих перед программистом.

            # 75

            # Перехват исключений в Python

        # В Python по сравнению с другими языками программирования очень много ситуаций, вызывающих исключения.

        # Давайте рассмотрим их подробнее. Пусть у нас есть список:

# lst = [1, 2, 3]

        # Обратимся к несуществующему элементу списка:

# print(lst[4])

        # Если же нам нужно продолжить работу без вывода исключения, его следует поймать с помощью конструкции try-except. Она имеет следующий синтаксис:

'''
try:
    # код, вызывающий исключение
except:
    # обработка ошибки
'''

        # В блоке try следует размещать код, который может содержать исключение. Если вдруг при выполнении этого кода возникнет исключительная ситуация, то выполнение кода не остановится, а перейдет в код блока except. В данном блоке следует прописать вывод сообщения, максимально точно описывающего суть возникшей ошибки.

        # Если же при выполнении блока try никаких исключительных ситуаций не случилось, то полезный код просто выполнится, а код из блока except - нет.

        # Давайте отловим наше исключение при обращении к несуществующему элементу списка. Для этого в блок try разместим код с потенциальной ошибкой. А в блоке except укажем вывод в консоль сообщения 'error: elem is not exist':

'''
lst = [1, 2, 3]
try:
    print(lst[4])
except:
    print('error: elem is not exist')
# После выполнения кода выведется:
# 'error: elem is not exist'
'''

        # После изучения конструкции try-except стиль написанного вами кода должен измениться. Теперь все места, в которых может возникнуть исключительная ситуация, нужно оборачивать в try, а в блоке except прописывать реакцию на это исключение.

    # 1

# Спросите у пользователя два числа. Поделите одно на другое. Поймайте исключительную ситуацию деления на ноль.

'''
def div():
    num_1 = input('Введите первое число: ')
    num_2 = input('Введите второе число: ')
    if num_1.isdigit() & num_2.isdigit():
        division = int(num_1) / int(num_2)
        return division
    else:
        print('Введеы не числа')

#print(div())


try:
    print(div())
except ZeroDivisionError:
    print('Введено не корректно второе число, на 0 делить нельзя')
'''
#print(1/0)

    # 2

# Спросите у пользователя число. Найдите квадратный корень из этого числа. Поймайте исключительную ситуацию извлечения корня из отрицательного числа.

'''
def square_of_the_number():
    num = input('Введите любое число')
    square = math.sqrt(int(num))
    return square


try:
    print(square_of_the_number())
except ValueError:
    print('Введено отрицательно число или буква, попробуйте снова')
'''
#print(int('a')/2)
#print(math.sqrt(-4))

    # 3

# Дан список. Спросите у пользователя целое число. Получите элемент списка, номер которого ввел пользователь. Поймайте исключительную ситуацию, которая случится, если пользователь ввел число вне диапазона списка.

'''
lst = list(range(random.randint(1, 5), random.randint(6, 10)))

def number_of_list_element(lst: list):
    a = input('введите номер элемента который хотите вывести: ')
    return print(lst[int(a)])

#print(lst)
#number_of_list_element(lst)
#print(lst[a])

try:
    number_of_list_element(lst)
except IndexError:
    print('Элемента с заданым индексом не существует')
except ValueError:
    print('Введено некорректное значение')
except NameError:
    print('Введено некорректное значение')
'''

    # 4

# Дан следующий код: num = '5' res = num + 2 print(res) Что не так с этим кодом? Исправьте его недостатки.

'''
num = '5'
try:
    res = num + 2
except TypeError:
    print('Нельзя складывать строки с числами')
'''

    # 5


lst = [1, 2, 3, 4]

def getElem(iter):
    print(iter[4])

try:
    getElem(lst)
except IndexError:
    print('Элемента с данным индексом не существует')




































