            # 83

            # Введение в импорт в Python

        # В Python можно импортировать не только стандартные модули, как, например, re (для работы с регулярками), но и создавать свои новые модули из пользовательских файлов

        # Пусть у нас есть файл lib.py, который расположен в том же каталоге, что и наш рабочий файл test.py:

        # Давайте создадим в нем функцию, которая будет выводить в консоль восклицательный знак:

'''
def func():
    print('!')
'''

        # Теперь перейдем в файл 83-91_MODULE_IMPORT.py и импортируем в него эту функцию. В верхней строке файла прописываем команду import, после которой указываем имя нужного файла (модуля). Поскольку оба файла лежат в одном каталоге, после import достаточно указать только имя модуля без его расширения:

'''
import lib

        # Затем вызовем импортированную функцию. Для этого после имени модуля через точку укажем имя функции func:

lib.func() # !
'''

        # При импорте модуля в рабочем файле становятся доступными не только функции, но и все его остальное содержимое, например, переменные.

        # После выполнения импорта модуля в рабочем каталоге автоматически появилась служебная папка __pycache__. Обратите внимание на то, что имена всех служебных файлов и папок в Python имеют двойное нижнее подчеркивание:

'''
/__pycache__/
lib.py
test.py
'''

        # Бывают случаи, когда нужно импортировать модуль, находящийся в другой папке, например, по пути /dir/lib.py:

'''
-/__pycache__/
-/dir/
    -lib.py
-test.py
'''

        # Тогда имя папки и файла при импорте прописывается через точку и также записывается импортированная функция:

'''
import dir.lib

dir.lib.func()
'''

    # 1

# Создайте файл file.py. В нем сделайте функцию, которая будет выводить в консоль число. Импортируйте данную функцию в свой файл с рабочим кодом.
'''
import module_import.file

module_import.file.func()
'''

    # 2

# В файле test1.file1.py создайте функцию, выводящую какое-либо сообщение. Импортируйте ее в свой рабочий файл.

'''
import module_import.file1

module_import.file1.func()
'''





            # 84

            # Переименование модуля в Python

        # Если нужно переименовать импортируемый модуль, то справа от его исходного имени следует применить ключевое слово as. И далее записать новое имя:

# import исходное имя as новое имя

            # Придумывая название для модуля, помните, что оно будет использоваться в качестве переменной. Поэтому модуль нельзя называть также, как и ключевые слова. Также имя нельзя начинать с цифры. Кроме того, для избежания путаницы не стоит называть свой модуль также как и стандартный модуль Python, например, math, re и т.п.

        # Давайте переименуем модуль lib в модуль l:

'''
import lib as l

l.func() # !
'''

    # 1

# Переименуйте модуль file, созданный и импортированный вами в прошлом уроке.

'''
import module_import.file as f

f.func()
'''





            # 85

            # Импорт части модуля в Python

        # Описанным в предыдущих уроках способом импортируется все содержимое модуля. Однако может понадобиться использовать только часть кода из модуля, например, несколько функций. Для этого нужно изменить синтаксис конструкции, используемой для импорта. 

        # Сначала прописывается ключевое слово from. Справа от него указывается имя модуля. Далее прописывается команда import, справа от которой перечисляются нужные функции:

# from модуль import нужные функции

        # Пусть в нашем модуле lib есть следующие функции:

'''
def func1():
    print(1)

def func2():
    print(2)

def func3():
    print(3)
'''

        # Давайте импортируем только func1 и func2:

'''
from lib import func1, func2

        # Данная конструкция удобна тем, что при вызове функции не нужно указывать имя импортированного модуля:

func1() # 1
func2() # 2
'''

        # Давайте попробуем вызвать func3:

# func3() # NameError: name 'func3' is not defined

    # 1

# Создайте модуль custom_math, в котором будут находиться следующие функции: get_sum для сложения двух чисел, get_divide для деления двух чисел, get_cube для возведения числа в куб. Импортируйте в рабочий файл только функции get_divide и get_cube.

'''
from module_import.custom_math import get_divide, get_cube

print(get_divide(4, 2))
print(get_cube(4))

# print(get_sum(1, 2)) # NameError: name 'get_sum' is not defined. Did you mean: 'get_cube'?
'''

    # 2

# В модуле user даны следующие переменные:
'''
name = 'user1'
email = 'user1@mail.com'
password = 'qwerty'
'''
# Импортируйте из данного модуля имя и почту пользователя. Выведите их в консоль.
'''
from module_import.user import name, email

print(f'Hi {name}. Your email is: {email}')
'''





















































































































